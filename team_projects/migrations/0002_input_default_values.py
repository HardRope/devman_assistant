# Generated by Django 4.0.4 on 2022-06-01 15:02

from django.db import migrations
import random
from datetime import date, time

from team_projects.models import Timecode

def test_values(apps, schema_editor):
    Mentor = apps.get_model('team_projects', 'Mentor')
    Student = apps.get_model('team_projects', 'Student')
    Level = apps.get_model('team_projects', 'Level')
    Project = apps.get_model('team_projects', 'Project')
    Group = apps.get_model('team_projects', 'Group')
    AvailableTimecode = apps.get_model('team_projects', 'AvailableTimecode')
    
    mentor = Mentor.objects.create(
        last_name='Осипов',
        first_name='Илья',
        telegram_id=12345678
    )
    mentor.save()

    levels = list()
    for title in ('junior', 'middle', 'senior'):
        level = Level.objects.create(title=title)
        level.save()
        levels.append(level)
    
    students = list()
    for _ in range(20):
        student = Student.objects.create(
            last_name=random.choice(("Иванов", "Петров", "Смирнов", "Сидоров")),
            first_name=random.choice(("Иван", "Петр", "Семен", "Сидр")),
            telegram_id=12345678,
            level=random.choice(levels)
        )
        student.save()
        students.append(student)
    
    available_timecodes = list()
    for _ in ('18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00'):
        hour, minute = _.split(":")
        timecode = AvailableTimecode.objects.create(time=time(hour=int(hour), minute=int(minute)))
        timecode.save()
        available_timecodes.append(timecode)

    project = Project.objects.create(
        title='DVMN TEST',
        description='blablabla',
        mentor=mentor,
        start_date=date.today(),
        finish_date=date.today(),
        
        is_active=True
    )
    project.students.set(students)
    project.available_timecodes.set(available_timecodes)
    project.save()
    
    # Надо починить ошибку <class '__fake__.AvailableTimecode'>
    # for _ in range(len(students)):
    #     timecode = Timecode.objects.create(
    #         timecode=available_timecodes[0],
    #         project=project,
    #         student=students[_]
    #     )
    #     timecode.save()

class Migration(migrations.Migration):

    dependencies = [
        ('team_projects', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(test_values)
    ]
